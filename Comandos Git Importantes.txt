Comandos Git Importantes

history: comando unix que permite ver todos los comandos ejecutados
code: comando para abrir visual studio code, se puede poner el nombre del archivo para abrirlo directamente

git init -> Comando para iniciar un repositorio git

git add -> Comando para añadir un archivo al repositorio, se puede indicar el nombre especifico o se ingresa punto para subir todo

git rm --cached [archivo] -> comando para revertir el add 

git commit -m "mensaje" -> realizar un commit, importante: si no se ingresa un mensaje la consola mostrara el editor vim
cuando esto suceda nos pedira que agreguemos un mensaje y saldremos de el con la combinacion: esc + shift z + shift z

git log -> muestra los logs, se puede sacar el log de un archivo especifico

git log --stat -> muestra los logs, indicando los archivos modificados 
nota: Si hay demasiados logs, nos iremos moviendo con las direccionales y/o enter, para salir presionamos la tecla q

git status -> obtener el status del repositorio

git config --global user.name "nombre usuario" -> comando para actualizar el nombre del usuario global

git config --global user.mail "correo" -> comando para actualizar el correo del usuario global

git diff -> comando para obtener diferencias en dos revisiones

git checkout [origen] [archivo] -> git checkout para obtener un archivo especifico, se puede especificar una revision para volver a una version anterior. 
Hay que ser cuidadosos con el checkout ya que podriamos eliminar datos.

git reset [version] --hard -> comando para volver a una version anterior, se descarta todos los cambios a la revision especifica.

git reset HEAD -> comando para remover del staging los archivos (similar a git rm --cached)

git clone [clone] -> comando para clonar un repositorio remoto

git push -> subir cambios al repositorio remoto

git fetch -> Descarga los cambios del repositorio remoto
git merge -> Comando para unir dos ramas

git pull -> Descarga los cambios del repositorio remoto y los envia hacia mi directorio de trabajo

git commit -am "mensaje" -> commando para commitear cambios, combina git add y git commit, pero solo funciona con archivos que ya existan en el repo
no funciona con archivos nuevos.

git branch [nombrerama] -> comando para crear una ramas (luego se debe usar git checkout para moverse a la rama)

git branch -> listar las ramas

Para hacer un Merge se debe estar en la rama resultado, normalmente debemos estar en Master.
Comandos>
git checkout Master
git merge cabecera 
(se abrira vim para confirmar el merge, para salir Esc + shift Z + shift Z)

<====================================>
github

git remote add origin [URL] -> comando para agregar un origen a un repositorio existente

git remote -> muestra el origen
git remote -v -> verbal

git push origin master -> Enviarle al origen la rama Master
git pull origin master -> Traer los cambios del remoto hacia la rama maestra local
git pull origin master --allow-unrelated-histories -> Permitir fusionar historias no relacionadas

SSH -> Conocido como secure share es el mecanismo de comunicación en el que se utilizan llaves privadas (quedan en el origen) y llaves publicas que se envian hacia el destinatario,
el destinatario puede cifrar los mensajes con la llave publica y este mensaje solo podrá ser decifrado con la llave privada que lo tiene el origen
Los comandos para configurar SSH son los siguientes:

Generar una nueva llave SSH: (Cualquier sistema operativo)
ssh-keygen -t rsa -b 4096 -C "youremail@example.com"

Comprobar proceso y agregarlo (Windows)
eval $(ssh-agent - s)
ssh-add ~/.ssh/id_rsa

Comprobar proceso y agregarlo (Mac)
eval "$(ssh-agent -s)"

¿Usas macOS Sierra 10.12.2 o superior? Haz lo siguiente:
cd ~/.ssh

Crea un archivo config… Con Vim 
vim config

Con VSCode: 
code config

Pega la siguiente configuración en el archivo…
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/id_rsa

Agrega tu llave
ssh-add -K ~/.ssh/id_rsa